name: Diff Microservice 

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Version of Node to use'
        required: true
        type: string
        default: '20.x'
    outputs:
      cdk-diff:
        description: "Results of running cdk diff"
        value: ${{ jobs.cdk-diff.outputs.results }}
    secrets:
      AWS_GITHUB_DIFF_ROLE:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  cdk-diff:
    name: Diff Microservice (cdk diff)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    outputs:
      results: ${{ steps.results.outputs.results }}
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_DIFF_ROLE }}
          aws-region: 'us-east-1'
      
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Configure Github NPM Registry
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Install Dependencies
        run: npm ci

      - name: CDK Diff
        run: |
          cdk diff 2>&1 2>&1 | tee output.log

      - name: Process Results
        id: results
        run: |
          function getStacks() {
            # Initialize an empty array to store the stack details
            stacks=()
            # Regular expression to match the beginning of a stack section
            stack_regex="^Stack (\w+)$"
            # Regular expression to match the end of the stack section
            end_regex="^âœ¨"
            # Flag to track whether we're inside a stack section
            inside_stack=false
            # Variable to store the current stack name
            current_stack=""
            # Variable to store the result for the current stack
            current_result=""
            # Iterate over each line in the input
            while IFS= read -r line; do
                # Check if the line matches the beginning of a stack section
                if [[ $line =~ $stack_regex ]]; then
                    # If we're already inside a stack section, add the previous stack to the stacks array
                    if $inside_stack; then
                        stacks+=("{\"stack\": \"$current_stack\", \"result\": \"$current_result\"}")
                        current_result=""
                    fi
                    # Reset current stack variable
                    current_stack="${BASH_REMATCH[1]}"
                    inside_stack=true
                elif $inside_stack && ! [[ $line =~ $end_regex ]]; then
                    # If we're inside a stack section and the line is not the end of the section,
                    # add the line to the current result
                    current_result+=$(echo "$line" | sed 's/\\/\\\\/g; s/"/\\"/g')$'\\n'
                elif $inside_stack; then
                    # If we're inside a stack section and the line matches the end regex,
                    # add the current stack to the stacks array
                    stacks+=("{\"stack\": \"$current_stack\", \"result\": \"$current_result\"}")
                    inside_stack=false
                fi
            done < "output.log"
        
            # Convert the stacks array to a JSON object
            json="{\"results\": [$(IFS=,; echo "${stacks[*]}")]}"
            echo "$json"  # Echo the JSON
          }
        
          # Call the function and capture the JSON output
          result_json=$(getStacks)
          echo "results=$(jq -c -r .results <<< $result_json)" >> $GITHUB_OUTPUT
